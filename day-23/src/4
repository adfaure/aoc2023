use itertools::Itertools;
use std::cell::Cell;
use std::collections::{HashSet, VecDeque};
use std::io::BufRead;
use std::rc::Rc;
use std::{fs::File, io::BufReader};

#[derive(PartialEq, Debug)]
enum Direction {
    Left,
    Right,
    Up,
    Down,
}

impl Direction {
    fn to_vec2(&self) -> (i32, i32) {
        match self {
            Direction::Left => (-1, 0),
            Direction::Right => (1, 0),
            Direction::Up => (0, -1),
            Direction::Down => (0, 1),
        }
    }

    fn from_vec2(dir: (i32, i32)) -> Self {
        match dir {
            (0, 1) => Direction::Down,
            (0, -1) => Direction::Up,
            (1, 0) => Direction::Right,
            (-1, 0) => Direction::Left,
            _ => panic!(),
        }
    }
}

fn neighbours<'a>(
    grid: &'a Vec<Vec<char>>,
    pos: &'a (u32, u32),
) -> impl Iterator<Item = (u32, u32)> + 'a {
    return [(0, 1), (0, -1), (-1, 0), (1, 0)]
        .into_iter()
        .map(move |dir| {
            (
                pos.0.checked_add_signed(dir.0),
                pos.1.checked_add_signed(dir.1),
                Direction::from_vec2(dir),
            )
        })
        .filter_map(move |neig| match (neig.0, neig.1) {
            (None, _) | (_, None) => None,
            (Some(x), Some(y)) => {
                if x < grid[0].len() as u32 && y < grid.len() as u32 {
                    let tile = grid[y as usize][x as usize];
                    if tile != '#' {
                        match tile {
                            '.' => Some((x, y)),
                            '>' if neig.2 == Direction::Right => Some((x, y)),
                            '^' if neig.2 == Direction::Up => Some((x, y)),
                            'v' if neig.2 == Direction::Down => Some((x, y)),
                            '<' if neig.2 == Direction::Left => Some((x, y)),
                            _ => None,
                        }
                    } else {
                        return None;
                    }
                } else {
                    return None;
                }
            }
        });
}

fn longuest_from(
    grid: &Vec<Vec<char>>,
    pos: &(u32, u32),
    path: HashSet<(u32, u32)>,
    dist: u32,
) -> u32 {
    let mut path = path.clone();
    if path.insert(*pos) {
        neighbours(&grid, pos)
            .map(|new_pos| longuest_from(grid, &new_pos, path.clone(), dist + 1))
            .max()
            .unwrap()
    } else {
        dist
    }
}

fn neighbours_no_slope<'a>(
    grid: &'a Vec<Vec<char>>,
    pos: &'a (u32, u32),
) -> impl Iterator<Item = (u32, u32)> + 'a {
    return [(0, 1), (0, -1), (-1, 0), (1, 0)]
        .into_iter()
        .map(move |dir| {
            (
                pos.0.checked_add_signed(dir.0),
                pos.1.checked_add_signed(dir.1),
            )
        })
        .filter_map(move |neig| match (neig.0, neig.1) {
            (None, _) | (_, None) => None,
            (Some(x), Some(y)) => {
                if x < grid[0].len() as u32
                    && y < grid.len() as u32
                    && grid[y as usize][x as usize] != '#'
                {
                    Some((x, y))
                } else {
                    None
                }
            }
        });
}

fn longuest_from_p2(
    grid: &Vec<Vec<char>>,
    pos: &(u32, u32),
    path: HashSet<(u32, u32)>,
    max_til_now: Rc<Cell<u32>>,
    intersections: &Vec<Vec<bool>>
) -> u32 {
    let mut path = path.clone();
    let end = (grid[0].len() as u32 - 2, grid.len() as u32 - 1);

    if path.insert(*pos) && pos != &end {
        let mut next = pos;

        if !intersections[pos.1 as usize][pos.0 as usize] {
            assert!(neighbours_no_slope(&grid, pos).count() <= 1);
            next = match neighbours_no_slope(&grid, pos).next() {
                None => return 0,
                Some(pos) => &pos
            }
        }

        neighbours_no_slope(&grid, pos)
            .map(|new_pos| longuest_from_p2(grid, &new_pos, path.clone(), max_til_now.clone()), &intersections)
            .max()
            .unwrap()

    } else if pos == &end {
        if max_til_now.get() < path.len() as u32 {
            max_til_now.set(path.len() as u32);
            println!("p2*: {:?}", path.len());
            path.len() as u32
        } else {
            0
        }
    } else {
        0
    }

}


fn dense_grid(grid: &Vec<Vec<char>>) -> Vec<Vec<bool>> {

    let mut res = vec![
        vec![false; grid[0].len()]; grid.len()
    ];

    for y in 0..grid.len() {
        for x in 0..grid[0].len() {
            let nb_neighbors = neighbours_no_slope(&grid, &(x as u32, y as u32)).count();
            if nb_neighbors > 2 {
                res[y][x] = true;
            }
        }
    }

    return res;
}


fn solve_p2(grid: Vec<Vec<char>>, pos: &(u32, u32)) {
    let res = longuest_from_p2(&grid, pos, HashSet::new(), Rc::new(Cell::new(0)), &dense_grid(&grid));

    println!("p2: {}", res - 1);
}

fn solve_p1(grid: Vec<Vec<char>>, pos: &(u32, u32)) {
    let res = longuest_from(&grid, pos, HashSet::new(), 0);

    println!("p1: {}", res - 1);
}

fn main() -> std::io::Result<()> {
    /* part 1 */

    let _grid = BufReader::new(File::open("input")?)
        .lines()
        .filter_map(|line| line.ok())
        .map(|line| line.chars().collect_vec())
        .collect_vec();

    solve_p1(_grid.clone(), &(1, 0));
    solve_p2(_grid, &(1, 0));

    Ok(())
}
